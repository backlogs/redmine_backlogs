if(RB==null){ var RB = {}; }

if (RB.constants == null) {
  RB.buildImageTag = function(name) {
    return "<img src='<%= image_path('') %>"+ name + "'/>";
  };

  RB.constants = {
    protect_against_forgery: <%= protect_against_forgery? ? "true" : "false" %>,
    request_forgery_protection_token: '<%= request_forgery_protection_token %>',
    form_authenticity_token: '<%= form_authenticity_token %>',
    <%
      autorefresh_wait = Backlogs.setting[:autorefresh_wait].to_s
      autorefresh_wait = '1000' if autorefresh_wait.blank?
      autorefresh_wait = '1000' unless autorefresh_wait =~ /^[0-9]+$/
      autorefresh_wait = Integer(autorefresh_wait)
      autorefresh_wait = 1000 if autorefresh_wait < 1000
    %>
    autorefresh_wait: <%= autorefresh_wait.to_json %>
  };

  RB.routes = {
    create_sprint: '<%= url_for(:controller => 'rb_sprints', :action => 'create') %>',
    update_sprint: '<%= url_for(:controller => 'rb_sprints', :action => 'update', :sprint_id => ":id") %>',

    create_story: '<%= url_for(:controller => 'rb_stories', :action => 'create') %>',
    update_story: '<%= url_for(:controller => 'rb_stories', :action => 'update', :id => ":id") %>',

    create_task: '<%= url_for(:controller => 'rb_tasks', :action => 'create') %>',
    update_task: '<%= url_for(:controller => 'rb_tasks', :action => 'update', :id => ":id") %>',

    create_impediment: '<%= url_for(:controller => 'rb_impediments', :action => 'create') %>',
    update_impediment: '<%= url_for(:controller => 'rb_impediments', :action => 'update', :id => ":id") %>',

    show_updated_items: '<%= url_for(:controller => 'rb_updated_items', :action => 'show', :project_id => ":id") %>',
    show_burndown_chart: '<%= url_for(:controller => 'rb_burndown_charts', :action => 'show', :sprint_id => ":id") %>',
    show_burndown_embedded: '<%= url_for(:controller => 'rb_burndown_charts', :action => 'embedded', :sprint_id => ":id") %>'
  };

  RB.urlFor = function(route_name, options) {
    route = RB.routes[route_name];
    if(options != null && options['id'] != null){
      route = route.replace(":id", options['id']);
    }
    return route;
  };
}

<% if @project %>
  RB.constants.project_id = <%= @project.id %>;
<% end %>

<% if @sprint %>
  RB.constants.sprint_id = <%= @sprint.id %>;
  RB.constants.project_id = <%= @sprint.project_id %>;
<% end %>

<%
  if @context == 'backlogs'
    default_status = IssueStatus.default
    default_status = default_status.id.to_s if default_status

    roles = User.current.roles_for_project(@project)
    transitions = {:states => {}, :transitions => {} , :default => default_status }

    RbStory.trackers.each {|tracker_id|
      tracker = Tracker.find(tracker_id)
      tracker_id = tracker_id.to_s

      transitions[:transitions][tracker_id] = {}

      tracker.issue_statuses.each {|status|
        status_id = status.id.to_s

        transitions[:states][status_id] = {:name => status.name, :closed => (status.is_closed? ? l(:label_closed_issues) + ' ' : "")}

        [[false, false], [true, true], [false, true], [true, false]].each{|creator, assignee|
          key = "#{creator ? '+' : '-'}c#{assignee ? '+' : '-'}a"

          transitions[:transitions][tracker_id][key] ||= {}

          begin
            allowed_statues = status.new_statuses_allowed_to(roles, tracker, creator, assignee)
          rescue #Workaround in order to support redmine 1.1.3
            allowed_statues = status.new_statuses_allowed_to(roles, tracker)
          end

          allowed = allowed_statues.collect{|s| s.id.to_s}

          transitions[:transitions][tracker_id][key][:default] ||= allowed[0]

          allowed.unshift(status_id)

          transitions[:transitions][tracker_id][key][status_id] = allowed.compact.uniq
        }
      }
    }

    project_versions = {} # FIXME (pa sharing) need test
    RbStory.find(:all, RbStory.find_options( :include_backlog => true, :project => @project.id, :sprint => @project.shared_versions.collect{|v| v.id})).each {|story|
      project_versions[story.project.id.to_s] ||= story.project.shared_versions.open.collect{|v| v.id.to_s }
    }
    project_self_and_descendants = {} #make a hash to avoid inArray in javascript
    projects = [ @project ] | @project.descendants || []
    #this ain't woikin: @project.self_and_descendants.collect(&:id).each{|project_id| #FIXME (pa sharing) need test
    projects.each{|project|
      project_self_and_descendants[project.id.to_s] = true
    }
  %>
  RB.constants.project_self_and_descendants = <%= project_self_and_descendants.to_json %>;
  RB.constants.project_versions = <%= project_versions.to_json %>; // FIXME (pa sharing) html_safe??
  RB.constants.story_states = <%= transitions.to_json.html_safe %>;
  RB.routes.backlog_menu = '<%= url_for(:controller => 'rb_master_backlogs', :action => 'menu', :project_id => @project.identifier, :format => 'json', :only_path => true) %>';
<% end %>
